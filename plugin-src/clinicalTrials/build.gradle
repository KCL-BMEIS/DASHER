/*
 * xnat-workshop: build.gradle
 * XNAT http://www.xnat.org
 * Copyright (c) 2017, Washington University School of Medicine
 * All Rights Reserved
 *
 * Released under the Simplified BSD.
 */

def groupName = 'org.nrg.xnat.workshop'
def pluginVersion = '1.0.0'

group groupName
version pluginVersion

apply plugin: 'io.spring.dependency-management'
apply plugin: 'groovy'
apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'xnat-data-builder'

buildscript {
    ext {
        vXnat = '1.7.4'
    }
    repositories {
        mavenLocal()
        maven {
            url 'https://nrgxnat.jfrog.io/nrgxnat/libs-release'
            name 'XNAT Release Repository'
        }
        mavenCentral()
        jcenter()
        maven {
            url 'https://nrgxnat.jfrog.io/nrgxnat/libs-snapshot'
            name 'XNAT Snapshot Repository'
        }
    }
    dependencies {
        classpath "io.spring.gradle:dependency-management-plugin:1.0.3.RELEASE"
        classpath "org.nrg.xnat.build:xnat-data-builder:${vXnat}"
    }
}

repositories {
    mavenLocal()
    maven {
        url 'https://nrgxnat.jfrog.io/nrgxnat/libs-release'
        name 'XNAT Release Repository'
    }
    mavenCentral()
    jcenter()
    maven {
        url 'https://nrgxnat.jfrog.io/nrgxnat/libs-snapshot'
        name 'XNAT Snapshot Repository'
    }
    maven {
        url 'https://nrgxnat.jfrog.io/nrgxnat/ext-release'
        name 'XNAT External Release Repository'
    }
}

sourceCompatibility = 1.7
targetCompatibility = 1.7

if (hasProperty("rt.17.jar")) {
    // Solution for bootstrap classpath warning and possible issues with compatibility with 1.7 libraries
    // was taken from this post on discuss.gradle.org: http://bit.ly/24xD9j0
    def rt17jar = getProperty("rt.17.jar")
    logger.info "Using ${rt17jar} as the bootstrap class path jar."
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.fork = true
            options.compilerArgs << "-XDignore.symbol.file"
            options.bootClasspath = rt17jar
        }
    }
} else {
    logger.warn "No value was set for the rt.17.jar build property, using the default bootstrap class path. You should consider setting rt.17.jar to indicate a jar file containing the Java 1.7 run-time library:\n"
    logger.warn "  ./gradlew -Prt.17.jar=rt-1.7.0_45.jar war\n"
}

compileJava {
    options.fork = false
}

jacoco {
    toolVersion = "0.7.9"
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination "${buildDir}/jacocoHtml"
    }
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
            srcDir 'build/xnat-generated/src/main/java'
        }
        resources {
            srcDir 'src/main/resources'
            srcDir 'build/xnat-generated/src/main/resources'
        }
    }
}

configurations {
    all*.exclude group: 'jamon'
}

dependencyManagement.imports {
    mavenBom "org.nrg:parent:${vXnat}"
}

dependencies {
    compile("org.nrg.xnat:web") {
        exclude group: '*'
    }
    compile("org.nrg.xnat:xnat-data-models") {
        exclude group: '*'
    }
    compile("org.nrg.xdat:core") {
        exclude group: '*'
    }
    compile "org.nrg:prefs"
    compile "org.nrg:framework"

    compile "org.reflections:reflections"
    compile "javax.servlet:javax.servlet-api"

    compile("turbine:turbine") {
        exclude group: '*'
    }
    compile("org.apache.velocity:velocity") {
        exclude group: '*'
    }

    compile "org.slf4j:slf4j-api"
    compile "org.slf4j:slf4j-log4j12"
    compile "org.slf4j:jul-to-slf4j"
    compile "log4j:log4j"

    compile "org.springframework:spring-aop"
    compile "org.springframework:spring-beans"
    compile "org.springframework:spring-context-support"
    compile "org.springframework:spring-context"
    compile "org.springframework:spring-core"
    compile "org.springframework:spring-jdbc"
    compile "org.springframework:spring-jms"
    compile "org.springframework:spring-messaging"
    compile "org.springframework:spring-orm"
    compile "org.springframework:spring-oxm"
    compile "org.springframework:spring-tx"
    compile "org.springframework:spring-web"
    compile "org.springframework:spring-webmvc"

    compile "io.springfox:springfox-swagger2"
    compile "io.springfox:springfox-swagger-ui"

    compile "org.springframework.security:spring-security-acl"
    compile "org.springframework.security:spring-security-aspects"
    compile "org.springframework.security:spring-security-config"
    compile "org.springframework.security:spring-security-ldap"
    compile "org.springframework.security:spring-security-taglibs"
    compile "org.springframework.ldap:spring-ldap-core"

    compile "ecs:ecs"
    compile("stratum:stratum") {
        transitive = false
    }

    testCompile "junit:junit"
    testCompile "org.springframework:spring-test"
}

publishing.publications {
    mavenJava(MavenPublication) {
        from components.java

        pom.withXml {
            def root = asNode()
            root.appendNode('name', 'XNAT Workshop 2016 Plugin')
            root.appendNode('url', 'https://github.com/XnatWorkshop/xnat-workshop-plugin')
            root.appendNode('inceptionYear', '2016')

            def scm = root.appendNode('scm')
            scm.appendNode('url', 'https://github.com/XnatWorkshop/xnat-workshop-plugin')
            scm.appendNode('connection', 'scm:https://github.com/XnatWorkshop/xnat-workshop-plugin.git')
            scm.appendNode('developerConnection', 'scm:git://github.com/XnatWorkshop/xnat-workshop-plugin.git')

            def license = root.appendNode('licenses').appendNode('license')
            license.appendNode('name', 'Simplified BSD 2-Clause License')
            license.appendNode('url', 'http://xnat.org/about/license.php')
            license.appendNode('distribution', 'repo')

            def developers = root.appendNode('developers')

            def tolsen = developers.appendNode('developer')
            tolsen.appendNode('id', 'timolsen23')
            tolsen.appendNode('name', 'Tim Olsen')
            tolsen.appendNode('email', 'tim@deck5consulting.com')
        }
    }
}
